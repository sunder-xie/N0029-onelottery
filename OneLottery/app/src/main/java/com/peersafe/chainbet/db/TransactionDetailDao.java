package com.peersafe.chainbet.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRANSACTION_DETAIL".
*/
public class TransactionDetailDao extends AbstractDao<TransactionDetail, String> {

    public static final String TABLENAME = "TRANSACTION_DETAIL";

    /**
     * Properties of entity TransactionDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property TxId = new Property(0, String.class, "txId", true, "TX_ID");
        public final static Property MyHash = new Property(1, String.class, "myHash", false, "MY_HASH");
        public final static Property MyId = new Property(2, String.class, "myId", false, "MY_ID");
        public final static Property OppositeHash = new Property(3, String.class, "oppositeHash", false, "OPPOSITE_HASH");
        public final static Property OppositeUserId = new Property(4, String.class, "oppositeUserId", false, "OPPOSITE_USER_ID");
        public final static Property Amount = new Property(5, Long.class, "amount", false, "AMOUNT");
        public final static Property Fee = new Property(6, Long.class, "fee", false, "FEE");
        public final static Property Time = new Property(7, java.util.Date.class, "time", false, "TIME");
        public final static Property Remark = new Property(8, String.class, "remark", false, "REMARK");
        public final static Property Type = new Property(9, Integer.class, "type", false, "TYPE");
    };


    public TransactionDetailDao(DaoConfig config) {
        super(config);
    }
    
    public TransactionDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRANSACTION_DETAIL\" (" + //
                "\"TX_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: txId
                "\"MY_HASH\" TEXT," + // 1: myHash
                "\"MY_ID\" TEXT," + // 2: myId
                "\"OPPOSITE_HASH\" TEXT," + // 3: oppositeHash
                "\"OPPOSITE_USER_ID\" TEXT," + // 4: oppositeUserId
                "\"AMOUNT\" INTEGER," + // 5: amount
                "\"FEE\" INTEGER," + // 6: fee
                "\"TIME\" INTEGER," + // 7: time
                "\"REMARK\" TEXT," + // 8: remark
                "\"TYPE\" INTEGER);"); // 9: type
    }


    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRANSACTION_DETAIL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TransactionDetail entity) {
        stmt.clearBindings();
 
        String txId = entity.getTxId();
        if (txId != null) {
            stmt.bindString(1, txId);
        }
 
        String myHash = entity.getMyHash();
        if (myHash != null) {
            stmt.bindString(2, myHash);
        }
 
        String myId = entity.getMyId();
        if (myId != null) {
            stmt.bindString(3, myId);
        }
 
        String oppositeHash = entity.getOppositeHash();
        if (oppositeHash != null) {
            stmt.bindString(4, oppositeHash);
        }
 
        String oppositeUserId = entity.getOppositeUserId();
        if (oppositeUserId != null) {
            stmt.bindString(5, oppositeUserId);
        }
 
        Long amount = entity.getAmount();
        if (amount != null) {
            stmt.bindLong(6, amount);
        }
 
        Long fee = entity.getFee();
        if (fee != null) {
            stmt.bindLong(7, fee);
        }
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(8, time.getTime());
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(9, remark);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(10, type);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TransactionDetail readEntity(Cursor cursor, int offset) {
        TransactionDetail entity = new TransactionDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // txId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // myHash
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // myId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // oppositeHash
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // oppositeUserId
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // amount
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // fee
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // time
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // remark
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TransactionDetail entity, int offset) {
        entity.setTxId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMyHash(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMyId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOppositeHash(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOppositeUserId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAmount(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setFee(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setTime(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setRemark(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setType(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(TransactionDetail entity, long rowId) {
        return entity.getTxId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(TransactionDetail entity) {
        if(entity != null) {
            return entity.getTxId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
