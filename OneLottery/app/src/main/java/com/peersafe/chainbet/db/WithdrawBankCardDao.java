package com.peersafe.chainbet.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WITHDRAW_BANK_CARD".
*/
public class WithdrawBankCardDao extends AbstractDao<WithdrawBankCard, String> {

    public static final String TABLENAME = "WITHDRAW_BANK_CARD";

    /**
     * Properties of entity WithdrawBankCard.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property BankCardId = new Property(0, String.class, "bankCardId", true, "BANK_CARD_ID");
        public final static Property AccountName = new Property(1, String.class, "accountName", false, "ACCOUNT_NAME");
        public final static Property OpeningBank = new Property(2, String.class, "openingBank", false, "OPENING_BANK");
        public final static Property CreateTime = new Property(3, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property IsDefaultCard = new Property(4, Boolean.class, "isDefaultCard", false, "IS_DEFAULT_CARD");
        public final static Property UserId = new Property(5, String.class, "userId", false, "USER_ID");
    };


    public WithdrawBankCardDao(DaoConfig config) {
        super(config);
    }
    
    public WithdrawBankCardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WITHDRAW_BANK_CARD\" (" + //
                "\"BANK_CARD_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: bankCardId
                "\"ACCOUNT_NAME\" TEXT," + // 1: accountName
                "\"OPENING_BANK\" TEXT," + // 2: openingBank
                "\"CREATE_TIME\" INTEGER," + // 3: createTime
                "\"IS_DEFAULT_CARD\" INTEGER," + // 4: isDefaultCard
                "\"USER_ID\" TEXT);"); // 5: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WITHDRAW_BANK_CARD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WithdrawBankCard entity) {
        stmt.clearBindings();
 
        String bankCardId = entity.getBankCardId();
        if (bankCardId != null) {
            stmt.bindString(1, bankCardId);
        }
 
        String accountName = entity.getAccountName();
        if (accountName != null) {
            stmt.bindString(2, accountName);
        }
 
        String openingBank = entity.getOpeningBank();
        if (openingBank != null) {
            stmt.bindString(3, openingBank);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(4, createTime.getTime());
        }
 
        Boolean isDefaultCard = entity.getIsDefaultCard();
        if (isDefaultCard != null) {
            stmt.bindLong(5, isDefaultCard ? 1L: 0L);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(6, userId);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public WithdrawBankCard readEntity(Cursor cursor, int offset) {
        WithdrawBankCard entity = new WithdrawBankCard( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // bankCardId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // accountName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // openingBank
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // createTime
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // isDefaultCard
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // userId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WithdrawBankCard entity, int offset) {
        entity.setBankCardId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAccountName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOpeningBank(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateTime(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setIsDefaultCard(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setUserId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(WithdrawBankCard entity, long rowId) {
        return entity.getBankCardId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(WithdrawBankCard entity) {
        if(entity != null) {
            return entity.getBankCardId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
