package com.peersafe.chainbet.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WITHDRAW_RECORD".
*/
public class WithdrawRecordDao extends AbstractDao<WithdrawRecord, String> {

    public static final String TABLENAME = "WITHDRAW_RECORD";

    /**
     * Properties of entity WithdrawRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property TxId = new Property(0, String.class, "txId", true, "TX_ID");
        public final static Property State = new Property(1, Integer.class, "state", false, "STATE");
        public final static Property OpeningBankName = new Property(2, String.class, "openingBankName", false, "OPENING_BANK_NAME");
        public final static Property AccountName = new Property(3, String.class, "accountName", false, "ACCOUNT_NAME");
        public final static Property AccountId = new Property(4, String.class, "accountId", false, "ACCOUNT_ID");
        public final static Property UserId = new Property(5, String.class, "userId", false, "USER_ID");
        public final static Property UserHash = new Property(6, String.class, "userHash", false, "USER_HASH");
        public final static Property Amount = new Property(7, Long.class, "amount", false, "AMOUNT");
        public final static Property RemitOrderNumber = new Property(8, String.class, "remitOrderNumber", false, "REMIT_ORDER_NUMBER");
        public final static Property Remark = new Property(9, String.class, "remark", false, "REMARK");
        public final static Property CreateTime = new Property(10, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifyTime = new Property(11, java.util.Date.class, "modifyTime", false, "MODIFY_TIME");
    };


    public WithdrawRecordDao(DaoConfig config) {
        super(config);
    }
    
    public WithdrawRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WITHDRAW_RECORD\" (" + //
                "\"TX_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: txId
                "\"STATE\" INTEGER," + // 1: state
                "\"OPENING_BANK_NAME\" TEXT," + // 2: openingBankName
                "\"ACCOUNT_NAME\" TEXT," + // 3: accountName
                "\"ACCOUNT_ID\" TEXT," + // 4: accountId
                "\"USER_ID\" TEXT," + // 5: userId
                "\"USER_HASH\" TEXT," + // 6: userHash
                "\"AMOUNT\" INTEGER," + // 7: amount
                "\"REMIT_ORDER_NUMBER\" TEXT," + // 8: remitOrderNumber
                "\"REMARK\" TEXT," + // 9: remark
                "\"CREATE_TIME\" INTEGER," + // 10: createTime
                "\"MODIFY_TIME\" INTEGER);"); // 11: modifyTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WITHDRAW_RECORD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WithdrawRecord entity) {
        stmt.clearBindings();
 
        String txId = entity.getTxId();
        if (txId != null) {
            stmt.bindString(1, txId);
        }
 
        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(2, state);
        }
 
        String openingBankName = entity.getOpeningBankName();
        if (openingBankName != null) {
            stmt.bindString(3, openingBankName);
        }
 
        String accountName = entity.getAccountName();
        if (accountName != null) {
            stmt.bindString(4, accountName);
        }
 
        String accountId = entity.getAccountId();
        if (accountId != null) {
            stmt.bindString(5, accountId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(6, userId);
        }
 
        String userHash = entity.getUserHash();
        if (userHash != null) {
            stmt.bindString(7, userHash);
        }
 
        Long amount = entity.getAmount();
        if (amount != null) {
            stmt.bindLong(8, amount);
        }
 
        String remitOrderNumber = entity.getRemitOrderNumber();
        if (remitOrderNumber != null) {
            stmt.bindString(9, remitOrderNumber);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(10, remark);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(11, createTime.getTime());
        }
 
        java.util.Date modifyTime = entity.getModifyTime();
        if (modifyTime != null) {
            stmt.bindLong(12, modifyTime.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public WithdrawRecord readEntity(Cursor cursor, int offset) {
        WithdrawRecord entity = new WithdrawRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // txId
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // state
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // openingBankName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // accountName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // accountId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userHash
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // amount
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // remitOrderNumber
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // remark
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // createTime
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)) // modifyTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WithdrawRecord entity, int offset) {
        entity.setTxId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setState(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setOpeningBankName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAccountName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAccountId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserHash(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAmount(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setRemitOrderNumber(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRemark(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCreateTime(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setModifyTime(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(WithdrawRecord entity, long rowId) {
        return entity.getTxId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(WithdrawRecord entity) {
        if(entity != null) {
            return entity.getTxId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
