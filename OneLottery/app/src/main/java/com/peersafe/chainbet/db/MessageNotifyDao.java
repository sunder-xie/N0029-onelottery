package com.peersafe.chainbet.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_NOTIFY".
*/
public class MessageNotifyDao extends AbstractDao<MessageNotify, String> {

    public static final String TABLENAME = "MESSAGE_NOTIFY";

    /**
     * Properties of entity MessageNotify.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property MsgId = new Property(0, String.class, "msgId", true, "MSG_ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property NewTxId = new Property(2, String.class, "newTxId", false, "NEW_TX_ID");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property Type = new Property(4, Integer.class, "type", false, "TYPE");
        public final static Property Time = new Property(5, java.util.Date.class, "time", false, "TIME");
        public final static Property UserId = new Property(6, String.class, "userId", false, "USER_ID");
        public final static Property IsRead = new Property(7, Boolean.class, "isRead", false, "IS_READ");
        public final static Property LotteryId = new Property(8, String.class, "lotteryId", false, "LOTTERY_ID");
        public final static Property HornContent = new Property(9, String.class, "hornContent", false, "HORN_CONTENT");
    };


    public MessageNotifyDao(DaoConfig config) {
        super(config);
    }
    
    public MessageNotifyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_NOTIFY\" (" + //
                "\"MSG_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: msgId
                "\"TITLE\" TEXT," + // 1: title
                "\"NEW_TX_ID\" TEXT," + // 2: newTxId
                "\"CONTENT\" TEXT," + // 3: content
                "\"TYPE\" INTEGER," + // 4: type
                "\"TIME\" INTEGER," + // 5: time
                "\"USER_ID\" TEXT," + // 6: userId
                "\"IS_READ\" INTEGER," + // 7: isRead
                "\"LOTTERY_ID\" TEXT," + // 8: lotteryId
                "\"HORN_CONTENT\" TEXT);"); // 9: hornContent
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_NOTIFY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MessageNotify entity) {
        stmt.clearBindings();
 
        String msgId = entity.getMsgId();
        if (msgId != null) {
            stmt.bindString(1, msgId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String newTxId = entity.getNewTxId();
        if (newTxId != null) {
            stmt.bindString(3, newTxId);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(5, type);
        }
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(6, time.getTime());
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(7, userId);
        }
 
        Boolean isRead = entity.getIsRead();
        if (isRead != null) {
            stmt.bindLong(8, isRead ? 1L: 0L);
        }
 
        String lotteryId = entity.getLotteryId();
        if (lotteryId != null) {
            stmt.bindString(9, lotteryId);
        }
 
        String hornContent = entity.getHornContent();
        if (hornContent != null) {
            stmt.bindString(10, hornContent);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MessageNotify readEntity(Cursor cursor, int offset) {
        MessageNotify entity = new MessageNotify( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // msgId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // newTxId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // type
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // time
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userId
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // isRead
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // lotteryId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // hornContent
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MessageNotify entity, int offset) {
        entity.setMsgId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNewTxId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setUserId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsRead(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setLotteryId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHornContent(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(MessageNotify entity, long rowId) {
        return entity.getMsgId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(MessageNotify entity) {
        if(entity != null) {
            return entity.getMsgId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
